swagger: "2.0"
info:
  description: "This is a sample swagger doc detailing the supplier POST route for learning"
  version: "0.0.1"
  title: "Distributable Swagger Doc"
  contact:
    email: "im.solomon@Outlook.com"
securityDefinitions:
  Bearer:
    type: apiKey
    name: Authorization
    in: header
    description: |
     For accessing the API a valid JWT token must be passed in all the queries in
     the 'Authorization' header.
  
  
     A valid JWT token is generated by the API and retourned as answer of a call
     to the route /login giving a valid user & password.
  
  
     The following syntax must be used in the 'Authorization' header :
  
         Bearer xxxxxx.yyyyyyy.zzzzzz
host: "localhost:8080"
basePath: /api/v1
schemes:
  # tip: remove http to make production-grade
  - http
  - https
# format of bodies a client can send (Content-Type)
consumes:
  - application/json
# format of the responses to the client (Accepts)
produces:
  - application/json
tags:
- name: "GeneralData"
  description: "General Data Endpoints"
- name: "Users"
  description: "User Data Endpoints"
- name: "Suppliers"
  description: "General1 Data Endpoints"
paths:
  /countries:    
    x-swagger-router-controller: countries
    get:
      tags:
      - "GeneralData"
      summary: "Get a list of countries"
      operationId: getCountries
      security:
        - Bearer: []
      x-security-scopes:
        - user
      produces:
      - "application/json"
      parameters:
      - in: "query"
        name: "name"
        description: "Name of the country"
        type: "string"
      - in: "query"
        name: "field"
        description: "Limit the fields to be returned"
        type: "array"
        uniqueItems: true
        items:
          type: string
        default:
          - '*'
      - in: "query"
        name: "sort"
        description: "Field on which to sort the returned countries"
        type: "string"
      - in: "query"
        name: "order"
        description: "Order by which to order the sorted countries"
        type: "string"
        default: "ASC"
        enum:
          - "ASC"
          - "DESC"
      # - in: "query"
      #   name: "limit"
      #   description: "Limit the number of returned result"
      #   type: "integer"
      #   format: "int32"
      #   default: 50
      #   minimum: 1
      # - in: "query"
        # name: "offset"
        # description: "Offset the number of returned result from an index of 0"
        # type: "integer"
        # format: "int64"
        # default: 0
        # minimum: 0
      responses:
        200:
          description: "Successfully Retrieved Countries"
          schema:
            type: "object"
            properties:
              results:
                type: "array"
                items:
                  $ref: "#/definitions/Country"
              message: 
                type: "string"
                description: "If empty result, it shall state 'No results were found'. If results found, it shall state 'Found X result(s)"
              total:
                type: "integer"
                description: "The actual number of suppliers found"
              # offset:
              #   type: "integer"
              #   description: "The returned return offset from an index of 0"
              # limit:
              #   type: "integer"
              #   description: "Limits the number of results returned"
        400:
          description: "Invalid Input"
          schema:
            type: "object"
            properties:
              status:
                type: "integer"
                description: "The http status code"
              code:
                type: "integer"
                description: "The error code"
              message:
                type: "string"
                description: "The message associated to the error code"
        403:
          description: "Access Denied"
          schema:
            type: "object"
            properties:
              status:
                type: "integer"
                description: "The http status code"
              code:
                type: "integer"
                description: "The error code"
              message:
                type: "string"
                description: "The message associated to the error code"
  /users/signup:    
    x-swagger-router-controller: users
    post:
      tags:
      - "Users"
      summary: "Create a new user"
      operationId: signup
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "User object that needs to be added to the database"
        required: true
        schema:
          $ref: "#/definitions/UserSignup"
      responses:
        201:
          description: "Successfully Created User"
          schema:
            type: "object"
            properties:
              data:
                $ref: "#/definitions/UserNew"
              message:
                type: "string"
        400:
          description: "Invalid Input"
          schema:
            type: "object"
            properties:
              status:
                type: "integer"
                description: "The http status code"
              code:
                type: "integer"
                description: "The error code"
              message:
                type: "string"
                description: "The message associated to the error code"
  /users/logout:    
    x-swagger-router-controller: users
    post:
      tags:
      - "Users"
      summary: "logout as a user"
      operationId: logout
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "User object that needs to be logout"
        required: true
        schema:
          $ref: "#/definitions/UserLogout"
      responses:
        201:
          description: "Successfully logged out user"
          schema:
            type: "object"
            properties:
              data:
                $ref: "#/definitions/UserLoggedIn"
              message:
                type: "string"
        404:
          description: "Username or password is incorrect"
          schema:
            type: "object"
            properties:
              status:
                type: "integer"
                description: "The http status code"
              code:
                type: "integer"
                description: "The error code"
              message:
                type: "string"
                description: "The message associated to the error code"
        400:
          description: "Invalid Input"
          schema:
            type: "object"
            properties:
              status:
                type: "integer"
                description: "The http status code"
              code:
                type: "integer"
                description: "The error code"
              message:
                type: "string"
                description: "The message associated to the error code"
  /users/login:    
    x-swagger-router-controller: users
    post:
      tags:
      - "Users"
      summary: "login as a user"
      operationId: login
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "User object that needs to be login"
        required: true
        schema:
          $ref: "#/definitions/UserLogin"
      responses:
        201:
          description: "Successfully logged in User"
          schema:
            type: "object"
            properties:
              data:
                $ref: "#/definitions/UserLoggedIn"
              message:
                type: "string"
        404:
          description: "Username or password is incorrect"
          schema:
            type: "object"
            properties:
              status:
                type: "integer"
                description: "The http status code"
              code:
                type: "integer"
                description: "The error code"
              message:
                type: "string"
                description: "The message associated to the error code"
        400:
          description: "Invalid Input"
          schema:
            type: "object"
            properties:
              status:
                type: "integer"
                description: "The http status code"
              code:
                type: "integer"
                description: "The error code"
              message:
                type: "string"
                description: "The message associated to the error code"
  /users/updateGeneralDetails:    
    x-swagger-router-controller: users
    post:
      tags:
      - "Users"
      summary: "Update user general details"
      operationId: updateGeneralDetails
      security:
        - Bearer: []
      x-security-scopes:
        - user
        - admin
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "User object that needs to be updated in the database"
        required: true
        schema:
          $ref: "#/definitions/UserGeneralDetails"
      responses:
        200:
          description: "Successfully Updated User General Details"
          schema:
            type: "object"
            properties:
              data:
                $ref: "#/definitions/UserProfile"
              message:
                type: "string"
        404:
          description: "Username or password is incorrect"
          schema:
            type: "object"
            properties:
              status:
                type: "integer"
                description: "The http status code"
              code:
                type: "integer"
                description: "The error code"
              message:
                type: "string"
                description: "The message associated to the error code"
        400:
          description: "Invalid Input"
          schema:
            type: "object"
            properties:
              status:
                type: "integer"
                description: "The http status code"
              code:
                type: "integer"
                description: "The error code"
              message:
                type: "string"
                description: "The message associated to the error code"
  /users/createProfessionalDetails:    
    x-swagger-router-controller: users
    post:
      tags:
      - "Users"
      summary: "Create user professional details"
      operationId: createOrUpdateProfessionalDetails
      security:
        - Bearer: []
      x-security-scopes:
        - user
        - admin
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "User professional details object that needs to be created in the database"
        required: true
        schema:
          $ref: "#/definitions/UserProfessionalDetails"
      responses:
        200:
          description: "Successfully Created User Professional Details"
          schema:
            type: "object"
            properties:
              data:
                $ref: "#/definitions/UserProfile"
              message:
                type: "string"
        404:
          description: "Username or password is incorrect"
          schema:
            type: "object"
            properties:
              status:
                type: "integer"
                description: "The http status code"
              code:
                type: "integer"
                description: "The error code"
              message:
                type: "string"
                description: "The message associated to the error code"
        400:
          description: "Invalid Input"
          schema:
            type: "object"
            properties:
              status:
                type: "integer"
                description: "The http status code"
              code:
                type: "integer"
                description: "The error code"
              message:
                type: "string"
                description: "The message associated to the error code"
  # /users/updateProfessionalDetails/{professionalDetailID}:    
  #   x-swagger-router-controller: users
  #   put:
  #     tags:
  #     - "Users"
  #     summary: "Update user professional details"
  #     operationId: updateProfessionalDetails
  #     security:
  #       - Bearer: []
  #     x-security-scopes:
  #       - user
  #       - admin
  #     consumes:
  #     - "application/json"
  #     produces:
  #     - "application/json"
  #     parameters:
  #     - in: "path"
  #       name: "professionalDetailID"
  #       required: true
  #       type: "string"
  #     - in: "body"
  #       name: "body"
  #       description: "User professional details object that needs to be updated in the database"
  #       required: true
  #       schema:
  #         $ref: "#/definitions/UserProfessionalDetails"
  #     responses:
  #       200:
  #         description: "Successfully Updated User Professional Details"
  #         schema:
  #           type: "object"
  #           properties:
  #             data:
  #               $ref: "#/definitions/UserProfile"
  #             message:
  #               type: "string"
  #       404:
  #         description: "Username or password is incorrect"
  #         schema:
  #           type: "object"
  #           properties:
  #             status:
  #               type: "integer"
  #               description: "The http status code"
  #             code:
  #               type: "integer"
  #               description: "The error code"
  #             message:
  #               type: "string"
  #               description: "The message associated to the error code"
  #       400:
  #         description: "Invalid Input"
  #         schema:
  #           type: "object"
  #           properties:
  #             status:
  #               type: "integer"
  #               description: "The http status code"
  #             code:
  #               type: "integer"
  #               description: "The error code"
  #             message:
  #               type: "string"
  #               description: "The message associated to the error code"
  /suppliers:    
    x-swagger-router-controller: suppliers
    get:
      tags:
      - "Suppliers"
      summary: "Get a list of suppliers"
      operationId: getSuppliers
      produces:
      - "application/json"
      parameters:
      - in: "query"
        name: "name"
        description: "Name of the supplier"
        type: "string"
      - in: "query"
        name: "contact"
        description: "Contact of the supplier"
        type: "string"
      - in: "query"
        name: "keywords"
        description: "Keywords of the supplier"
        type: "string"
      - in: "query"
        name: "terms"
        description: "Contract terms for the supplier"
        type: "string"
      - in: "query"
        name: "account"
        description: "Account number"
        type: "string"
      - in: "query"
        name: "currency"
        description: "Currency code of the supplier"
        type: "string"
        enum:
          - "CAD"
          - "USD"
          - "EUR"
      - in: "query"
        name: "field"
        description: "Limit the fields to be returned"
        type: "array"
        uniqueItems: true
        items:
          type: string
        default:
          - '*'
      - in: "query"
        name: "sort"
        description: "Field on which to sort the returned suppliers"
        type: "string"
      - in: "query"
        name: "order"
        description: "Order by which to order the sorted suppliers"
        type: "string"
        enum:
          - "ASC"
          - "DESC"
      - in: "query"
        name: "limit"
        description: "Limit the number of returned result"
        type: "integer"
        format: "int32"
        default: 50
        minimum: 1
      - in: "query"
        name: "offset"
        description: "Offset the number of returned result from an index of 0"
        type: "integer"
        format: "int64"
        default: 0
        minimum: 0
      responses:
        200:
          description: "Successfully Retrieved Suppliers"
          schema:
            type: "object"
            properties:
              results:
                type: "array"
                items:
                  $ref: "#/definitions/Supplier"
              message: 
                type: "string"
                description: "If empty result, it shall state 'No results were found'. If results found, it shall state 'Found X result(s)"
              total:
                type: "integer"
                description: "The actual number of suppliers found"
              offset:
                type: "integer"
                description: "The returned return offset from an index of 0"
              limit:
                type: "integer"
                description: "Limits the number of results returned"
        400:
          description: "Invalid Input"
          schema:
            type: "object"
            properties:
              status:
                type: "integer"
                description: "The http status code"
              code:
                type: "integer"
                description: "The error code"
              message:
                type: "string"
                description: "The message associated to the error code"
    post:
      tags:
      - "Suppliers"
      summary: "Create a new supplier"
      operationId: createSupplier
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Supplier object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/SupplierCreate"
      responses:
        201:
          description: "Successfully Created Supplier"
          schema:
            type: "object"
            properties:
              data:
                $ref: "#/definitions/Supplier"
              message:
                type: "string"
        400:
          description: "Invalid Input"
          schema:
            type: "object"
            properties:
              status:
                type: "integer"
                description: "The http status code"
              code:
                type: "integer"
                description: "The error code"
              message:
                type: "string"
                description: "The message associated to the error code"
  /suppliers/{supplierId}:
    x-swagger-router-controller: suppliers
    put:
      tags:
      - "Suppliers"
      summary: "Update a supplier"
      operationId: updateSupplier
      description: "Modify a supplier"      
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "supplierId"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "Supplier object with edited fields"
        schema:
          $ref: "#/definitions/SupplierModify"
      responses:        
        200:
          description: "Success"        
          schema:
            type: "object"
            properties:
              data:
                $ref: "#/definitions/Supplier"
              message: 
                type: "string"
        400:
          description: "Invalid Input"
          schema:
            type: "object"
            properties:
              status:
                type: "integer"
              code:
                type: "integer"
              message:
                type: "string"
        404:
          description: "Supplier does not exist"
definitions:
  UserSignup:
    type: "object"
    description: "The model of a user object to signup a user"
    required:
      - "userName"
      - "firstName"
      - "lastName"
      - "email"
      - "password"
    properties:
      userName:
        type: "string"
        description: "The username of the user. It will be used for login purpose"
      firstName:
        type: "string"
        description: "The first name of the user"
      lastName:
        type: "string"
        description: "The last name of the user"
      email:
        type: "string"
        format: "email"
        description: "The email of the user"
      password:
        type: "string"
        description: "The password of the user"
  UserLogout:
    type: "object"
    description: "The model of a user object to logout a user"
    required:
      - "userName"
    properties:
      userName:
        type: "string"
        description: "The username of the user. It will be used for logout purpose"
  UserLogin:
    type: "object"
    description: "The model of a user object to login a user"
    required:
      - "userName"
      - "password"
    properties:
      userName:
        type: "string"
        description: "The username of the user. It will be used for login purpose"
      password:
        type: "string"
        description: "The password of the user"
  UserLoggedIn:
    type: "object"
    description: "The model of a logged in user as return by api"
    properties:
      apiKey:
        type: "string"
        description: "The key return by the api that will be used for further communication"
  UserNew:
    type: "object"
    description: "The model for a new user as returned by the API"
    properties:
      userName:
        type: "string"
        description: "The user name of the user. will be used for login purpose"
      firstName:
        type: "string"
        description: "The first name of the user"
      lastName:
        type: "string"
        description: "The last name of the user"
      email:
        type: "string"
        format: "email"
        description: "The email of the user"
  UserGeneralDetails:
    type: "object"
    description: "The model of a user object to update user general details"
    required:      
      - "firstName"
      - "lastName"
      - "gender"
      - "title"
    properties:
      firstName:
        type: "string"
        description: "The first name of the user"
      lastName:
        type: "string"
        description: "The last name of the user"
      displayName:
        type: "string"
        description: "The display name of the user"
      email:
        type: "string"
        format: "email"
        description: "The email of the user"
      about:
        type: "string"
        description: "The about of the user"
      gender:
        type: "string"
        enum:
        - "Male"
        - "Female"
        description: "The gender of the user"
      title:
        type: "string"
        enum:
        - "Mr"
        - "Mrs"
        - "Mss"
        - "Ms"
        - "Mx"
        - "Dr"
        description: "The title of the user"
      addressPersonal:
        type: "object"
        $ref: "#/definitions/Address"
      contactsPersonal:
        type: "array"
        items:
          type: "string"
          description: "contact number of the user"
  UserProfessionalDetails:
    type: "object"
    description: "The model of a user object to update user professional details"
    required:      
      - "category"
      - "experty"
    properties:
      professionalDetailID:
        type: "string"
        description: "The professional detail id of user"    
      category:
        type: "string"
        description: "The professional category of user"
      experty:
        type: "string"
        description: "The professional experty of user"
      description:
        type: "string"
        description: "The description about user profession"
      isActive:
        type: "boolean"
        description: "The description about user profile active state"
      professionalTags:
        type: "array"
        items:
          type: "string"
        description: "The professional tags that the user professional detail is associated with."
  Country:
    type: "object"
    description: "The model for a country as returned by the API"
    properties:
      code:
        type: "string"        
        description: "The country code in the system"
      name:
        type: "string"
        description: "The name of the country"
  Contacts: 
    type: "object"
    description: "The model for Contacts"
    properties:
      contact:
        type: "string"        
        description: "The contact number of the user"
  Address: 
    type: "object"
    required:      
    - "country"
    - "state"
    - "city"
    - "addressLine"
    description: "The model for address"
    properties:
      addressID:
        type: "string"        
        description: "The address id in the system"
      country:
        type: "string"        
        description: "The country name in the system"
      state:
        type: "string"
        description: "The name of the state in the system"
      city:
        type: "string"
        description: "The name of the city in the system"
      addressLine:
        type: "string"
        description: "The address line of the user"
  SupplierCreate:
    type: "object"
    description: "The model of a supplier object to create a supplier"
    required:
      - "name"
      - "phone"
      - "email"
      - "shippingAddress"
      - "terms"
      - "currencyCode"
    properties:
      name:
        type: "string"
        description: "The name of the supplier"
      phone:
        type: "string"
        description: "The phone number of the supplier"
      email:
        type: "string"
        format: "email"
        description: "The email of the supplier"
      accountNum:
        type: "string"
        description: "The account number for the supplier"
      businessNum:
        type: "string"
        description: "The business number for the supplier"
      website:
        type: "string"
        description: "Website of the supplier"
      contact:
        type: "object"
        properties:
          name:
            type: "string"
            description: "The name of the contact"
          email:
            type: "string"
            format: "email"
            description: "The email of the contact"
          phone:
            type: "string"
            description: "The phone number of the contact"
      shippingAddress:
        type: "string"
        description: "The shipping address of the supplier"
      billingAddress:
        type: "string"
        description: "The billing address of the supplier"
      keywords:
        type: "array"
        items:
          type: "string"
        description: "The keywords that the supplier is associated with."
      notes:
        type: "string"
        description: "A note about the supplier"
      terms:
        type: "string"
        description: "Predefined terms of the supplier."
      currencyCode:
        type: "string"
        enum:
        - "CAD"
        - "USD"
        - "EUR"
        description: "Currency code of the suppliers payment."
      countryCode:
        type: "string"
        enum:
        - "CAN"
        - "USA"
        description: "Country code of the supplier"
      state:
        type: "string"
        description: "The province/state from Canada/USA."
  UserProfile:
    type: "object"
    description: "The model for a new user profile as returned by the API"
    properties:
      title:
        type: "string"
        description: "The title of the user"
      gender:
        type: "string"
        description: "The gender of the user"
      firstName:
        type: "string"
        description: "The first name of the user"
      lastName:
        type: "string"
        description: "The last name of the user"
      displayName:
        type: "string"
        description: "The display name of the user"
      email:
        type: "string"
        format: "email"
        description: "The email of the user"
      about:
        type: "string"
        description: "The about of the user"
      addressPersonal:
        type: "object"
        $ref: "#/definitions/Address"
      contactsPersonal:
        type: "array"
        items:
          type: "string"
          description: "contact number of the user"
      professionalDetails:
        type: "object"
        $ref: "#/definitions/UserProfessionalDetails"
  Supplier:
    type: "object"
    description: "The model for a supplier as returned by the API"
    properties:
      id:
        type: "integer"
        format: "int64"
        description: "The supplier id in the system"
      name:
        type: "string"
        description: "The name of the supplier. No character restriction"
      phone:
        type: "string"
        description: "The phone number of the supplier"
      email:
        type: "string"
        format: "email"
        description: "The email of the supplier"
      accountNum:
        type: "string"
        description: "The account number for the supplier"
      businessNum:
        type: "string"
        description: "The business number for the supplier"
      contact:
        type: "object"
        properties:
          name:
            type: "string"
            description: "The name of the contact"
          email:
            type: "string"
            description: "The email of the contact"
          phone:
            type: "string"
            description: "The phone number of the contact"
      shippingAddress:
        type: "string"
        description: "The shipping address of the supplier"
      billingAddress:
        type: "string"
        description: "The billing address of the supplier"
      keywords:
        type: "array"
        items:
          type: "string"
        description: "The keywords that the supplier is associated with"
      notes:
        type: "string"
        description: "A note on the supplier"
      terms:
        type: "string"
      currencyCode:
        type: "string"
        enum:
        - "CAD"
        - "USD"
        - "EUR"
        description: "Currency code of the suppliers payment"
      countryCode:
        type: "string"
        enum:
        - "CAN"
        - "USA"
        description: "Country code of the supplier"
      state:
        type: "string"
        description: "The province/state from Canada/USA"
  SupplierModify:
    type: "object"
    description: "The model of a supplier object to update a supplier"
    properties:
      name:
        type: "string"
        description: "The name of the supplier"
      phone:
        type: "string"
        description: "The phone number of the supplier"
      email:
        type: "string"
        format: "email"
        description: "The email of the supplier"
      accountNum:
        type: "string"
        description: "The account number for the supplier"
      businessNum:
        type: "string"
        description: "The business number for the supplier"
      website:
        type: "string"
        description: "Website of the supplier"
      contact:
        type: "object"
        properties:
          name:
            type: "string"
            description: "The name of the contact"
          email:
            type: "string"
            format: "email"
            description: "The email of the contact"
          phone:
            type: "string"
            description: "The phone number of the contact"
      shippingAddress:
        type: "string"
        description: "The shipping address of the supplier"
      billingAddress:
        type: "string"
        description: "The billing address of the supplier"
      keywords:
        type: "array"
        items:
          type: "string"
        description: "The keywords that the supplier is associated with."
      notes:
        type: "string"
        description: "A note about the supplier"
      terms:
        type: "string"
        description: "Predefined terms of the supplier. If term is not found in the term table, the route shall 400"
      currencyCode:
        type: "string"
        enum:
        - "CAD"
        - "USD"
        - "EUR"
        description: "Currency code of the suppliers payment. If currency code is not found in the currency table, the route shall 400"
      countryCode:
        type: "string"
        enum:
        - "CAN"
        - "USA"
        description: "Country code of the supplier"
      state:
        type: "string"
        description: "The province/state from Canada/USA. This field will be an enum and it will be your responsibility to add them in. the enums will be the following values: ..."